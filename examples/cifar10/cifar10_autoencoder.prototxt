name: "AutoEncoder"
layer {
  name: "cifar"
  type: "Data"
  top: "data"
  include {
    phase: TRAIN
  }
  data_param {
    source: "examples/cifar10/cifar10_train_lmdb"
    backend: LMDB
    batch_size: 128
  }
}
layer {
  name: "cifar"
  type: "Data"
  top: "data"
  include {
    phase: TEST
  }
  data_param {
    source: "examples/cifar10/cifar10_test_lmdb"
    batch_size: 128
    backend: LMDB
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 4
    stride: 2
    weight_filler {
      type: "gaussian"
      std: 0.019999999552965164
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
  relu_param {
    negative_slope: 0.20000000298023224
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "conv1"
  top: "conv2"
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 4
    stride: 2
    weight_filler {
      type: "gaussian"
      std: 0.019999999552965164
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
  relu_param {
    negative_slope: 0.20000000298023224
  }
}
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "conv2"
  top: "conv3"
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 4
    stride: 2
    weight_filler {
      type: "gaussian"
      std: 0.019999999552965164
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "conv3"
  top: "conv3"
  relu_param {
    negative_slope: 0.20000000298023224
  }
}
layer {
  name: "deconv3"
  type: "Deconvolution"
  bottom: "conv3"
  top: "deconv3"
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 4
    stride: 2
    weight_filler {
      type: "gaussian"
      std: 0.019999999552965164
    }
  }
}
layer {
  name: "relu4"
  type: "ReLU"
  bottom: "deconv3"
  top: "deconv3"
}
layer {
  name: "deconv2"
  type: "Deconvolution"
  bottom: "deconv3"
  top: "deconv2"
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 4
    stride: 2
    weight_filler {
      type: "gaussian"
      std: 0.019999999552965164
    }
  }
}
layer {
  name: "relu5"
  type: "ReLU"
  bottom: "deconv2"
  top: "deconv2"
}
layer {
  name: "deconv1"
  type: "Deconvolution"
  bottom: "deconv2"
  top: "deconv1"
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 4
    stride: 2
    weight_filler {
      type: "gaussian"
      std: 0.019999999552965164
    }
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "deconv1"
  top: "deconv1"
}
layer {
  name: "output"
  type: "Convolution"
  bottom: "deconv1"
  top: "output"
  convolution_param {
    num_output: 3
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.019999999552965164
    }
  }
}
#layer {
#  name: "output"
#  type: "TanH"
#  bottom: "conv_output"
#  top: "output"
#}
layer {
  name: "loss"
  type: "EuclideanLoss"
  bottom: "output"
  bottom: "data"
  top: "loss"
}
