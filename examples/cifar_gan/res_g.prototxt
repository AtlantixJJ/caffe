name: "ResidualGenerator"
layer {
  name: "data"
  type: "RandVec"
  top: "data"
  randvec_param {
    batch_size: 128
    dim: 128
    lower: -1.0
    upper: 1.0
  }
}
layer {
  name: "fc"
  type: "InnerProduct"
  bottom: "data"
  top: "fc"
  inner_product_param {
    num_output: 16384
    weight_filler {
      type: "gaussian"
      std: 0.019999999552965164
    }
  }
}
layer {
  name: "reshape"
  type: "Reshape"
  bottom: "fc"
  top: "reshape"
  reshape_param {
    shape {
      dim: 128
      dim: 1024
      dim: 4
      dim: 4
    }
  }
}
layer {
  name: "bn"
  type: "BatchNorm"
  bottom: "reshape"
  top: "bn"
}
layer {
  name: "relu"
  type: "ReLU"
  bottom: "bn"
  top: "bn"
}
layer {
  name: "deconv1"
  type: "Deconvolution"
  bottom: "bn"
  top: "deconv1"
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    stride: 2
    weight_filler {
      type: "gaussian"
      std: 0.019999999552965164
    }
  }
}
layer {
  name: "bn1"
  type: "BatchNorm"
  bottom: "deconv1"
  top: "bn1"
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "bn1"
  top: "bn1"
}
layer {
  name: "deconv2"
  type: "Deconvolution"
  bottom: "bn1"
  top: "deconv2"
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    stride: 2
    weight_filler {
      type: "gaussian"
      std: 0.019999999552965164
    }
  }
}
layer {
  name: "bn2"
  type: "BatchNorm"
  bottom: "deconv2"
  top: "bn2"
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "bn2"
  top: "bn2"
}
layer {
  name: "res1_conv1"
  type: "Convolution"
  bottom: "bn2"
  top: "res1_conv1"
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.019999999552965164
    }
  }
}
layer {
  name: "res1_bn1"
  type: "BatchNorm"
  bottom: "res1_conv1"
  top: "res1_bn1"
}
layer {
  name: "res1_act1"
  type: "ReLU"
  bottom: "res1_bn1"
  top: "res1_bn1"
}
layer {
  name: "res1_conv2"
  type: "Convolution"
  bottom: "res1_bn1"
  top: "res1_conv2"
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.019999999552965164
    }
  }
}
layer {
  name: "res1_bn2"
  type: "BatchNorm"
  bottom: "res1_conv2"
  top: "res1_bn2"
}
layer {
  name: "res1_out"
  type: "Eltwise"
  bottom: "bn2"
  bottom: "res1_bn2"
  top: "res1_out"
}
layer {
  name: "bn3"
  type: "BatchNorm"
  bottom: "res1_out"
  top: "bn3"
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "bn3"
  top: "bn3"
}
layer {
  name: "res2_conv1"
  type: "Convolution"
  bottom: "bn3"
  top: "res2_conv1"
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.019999999552965164
    }
  }
}
layer {
  name: "res2_bn1"
  type: "BatchNorm"
  bottom: "res2_conv1"
  top: "res2_bn1"
}
layer {
  name: "res2_act1"
  type: "ReLU"
  bottom: "res2_bn1"
  top: "res2_bn1"
}
layer {
  name: "res2_conv2"
  type: "Convolution"
  bottom: "res2_bn1"
  top: "res2_conv2"
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.019999999552965164
    }
  }
}
layer {
  name: "res2_bn2"
  type: "BatchNorm"
  bottom: "res2_conv2"
  top: "res2_bn2"
}
layer {
  name: "res2_out"
  type: "Eltwise"
  bottom: "bn3"
  bottom: "res2_bn2"
  top: "res2_out"
}
layer {
  name: "bn4"
  type: "BatchNorm"
  bottom: "res2_out"
  top: "bn4"
}
layer {
  name: "relu4"
  type: "ReLU"
  bottom: "bn4"
  top: "bn4"
}
layer {
  name: "deconv3"
  type: "Deconvolution"
  bottom: "bn4"
  top: "deconv3"
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
    stride: 2
    weight_filler {
      type: "gaussian"
      std: 0.019999999552965164
    }
  }
}
layer {
  name: "bn5"
  type: "BatchNorm"
  bottom: "deconv3"
  top: "bn5"
}
layer {
  name: "relu5"
  type: "ReLU"
  bottom: "bn5"
  top: "bn5"
}
layer {
  name: "conv_output"
  type: "Convolution"
  bottom: "bn5"
  top: "conv_output"
  convolution_param {
    num_output: 3
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.019999999552965164
    }
  }
}
layer {
  name: "output"
  type: "TanH"
  bottom: "conv_output"
  top: "output"
}
